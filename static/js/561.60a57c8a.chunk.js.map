{"version":3,"file":"static/js/561.60a57c8a.chunk.js","mappings":"qLACaA,E,MAAQC,GAAAA,GAAH,ue,SCEH,SAASC,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OAAO,SAACH,EAAD,UAAQG,M,oLCJXC,EAAW,+BACXC,EAAU,mCAAhB,SACeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,W,aAAf,O,oBAAA,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,EAAiBC,GAC/B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,gCACQa,EADR,oBACyBZ,EADzB,+CAKxB,SAASa,EAAQC,GACtB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,oBAKxB,SAASe,EAAWD,GACzB,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,4BACqBd,EADrB,2BAKxB,SAASgB,IACd,OAAOf,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASiB,EAAcH,GAE5B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,kBACNe,EADM,oBACad,M,2JC7BtCkB,EAAUtB,EAAAA,GAAAA,GAAH,0UAaPuB,EAAOvB,EAAAA,GAAAA,IAAH,oOAUJD,EAAQC,EAAAA,GAAAA,EAAH,qFAKI,SAASwB,IAQtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAI,aAAcH,GAC1B,OAA4BI,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,MACAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,KAAwBC,MAAK,SAAAzB,GAAQ,OAAIsB,EAAUtB,EAAS0B,cAC3D,IACHR,QAAQC,IAAIE,GASZ,OACE,iCACE,SAAC,IAAD,CAAa5B,KAAK,mBACjB4B,IACC,SAACR,EAAD,UACGQ,EAAOM,KAAI,SAAAC,GAAK,OACf,yBAME,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAOf,EAAxC,UACE,UAACF,EAAD,YACE,gBACEkB,IAAG,WAvBFC,EAuBkBL,EAAMK,YAtBrB,OAAhBA,EACK,6DAGH,kCAAN,OAAyCA,KAmBzBC,IAAKN,EAAMO,MACXC,MAAM,MACNC,OAAO,SAET,SAAC/C,EAAD,UAAQsC,EAAMO,cAdXP,EAAME,IAdN,IAAAG","sources":["components/PageHeading/PageHeading.styled.js","components/PageHeading/PageHeading.jsx","services/movies-api.js","views/HomeView.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Title = styled.h1`\n  /* width: 300px; */\n  width: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px;\n  margin-top: 0;\n  margin-bottom: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 8px;\n  color: #2314f7;\n  font-weight: bold;\n  /* font-size: 40px; */\n  text-align: center;\n  background-image: repeating-linear-gradient(\n    -45deg,\n    #30ebfc,\n    #30ebfc 15px,\n    #fcfccf 15px,\n    #fcfccf 30px\n  );\n`;\n","import { Title } from './PageHeading.styled.js';\nimport PropTypes from 'prop-types';\n\nexport default function PageHeading({ text }) {\n  return <Title>{text}</Title>;\n}\nPageHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b799de2e1359641dffd47460cedfbdc0';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n// import { useNavigate } from 'react-router-dom';\nimport * as moviesAPI from '../services/movies-api';\nimport PageHeading from '../components/PageHeading/PageHeading';\nimport styled from 'styled-components';\n\nconst Gallery = styled.ul`\n  display: grid;\n  /* max-width: calc(100vw - 48px); */\n  flex-basis: calc((100% - 8 * 15px) / 3);\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 5px;\n  box-shadow: 0 0 10px 1px #30ebfc;\n`;\nconst Title = styled.p`\n  display: flex;\n  /* font-size: 22px; */\n  padding: 5px;\n`;\nexport default function HomeView() {\n  // для того що писати в адресну строку динамічні значення(раптом зміниться шлях фільму наприклад) то використовуємо юз раут метч(для вкладеної навігації )\n  // const navigate = useNavigate();\n  // console.log(navigate);\n  // const match = useRouteMatch();\n  // console.log(match);\n  // там приходить обєкт, в якому є юрл, от його ми і беремо\n  // const { url } = useRouteMatch();\n  const location = useLocation();\n  console.log('HomeView: ', location);\n  const [movies, setMovies] = useState(null);\n  useEffect(() => {\n    moviesAPI.GetTrending().then(response => setMovies(response.results));\n  }, []);\n  console.log(movies);\n  const viewPoster = poster_path => {\n    if (poster_path === null) {\n      return 'https://wipfilms.net/wp-content/data/posters/tt0338683.jpg';\n      // 'NO POSTER';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n\n  return (\n    <>\n      <PageHeading text=\"Trending today\" />\n      {movies && (\n        <Gallery>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              {/* тут можна зробити цілі карточки с картинками, цілі галереї, дивимось, що нам віддав бекенд */}\n              {/* {movie.title} */}\n              {/* але ми хочемо щоб назва фільму була ссілочкою, при клікі на яку ми б переходили на зовсім нову сторінку з всією інформацією про фільм.\n              // тому використовуємо Лінк(він до речі має класснейм, тобто можна стилізувати) (не НавЛінк, тому що ми просто будемо переходити по ссилці на зовсім нову сторінку, тобто наш компонент хоумвью буде розмонтований а новий компонент(з інфо фільму) змонтований */}\n              {/* пишимо куди ми переходимо через шаблонну строку  */}\n              <Link to={`/movies/${movie.id}`} state={location}>\n                <Card>\n                  <img\n                    src={`${viewPoster(movie.poster_path)}`}\n                    alt={movie.title}\n                    width=\"300\"\n                    height=\"450\"\n                  />\n                  <Title>{movie.title}</Title>\n                </Card>\n              </Link>\n            </li>\n          ))}\n        </Gallery>\n      )}\n    </>\n  );\n}\n"],"names":["Title","styled","PageHeading","text","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById","Gallery","Card","HomeView","location","useLocation","console","log","useState","movies","setMovies","useEffect","moviesAPI","then","results","map","movie","to","id","state","src","poster_path","alt","title","width","height"],"sourceRoot":""}