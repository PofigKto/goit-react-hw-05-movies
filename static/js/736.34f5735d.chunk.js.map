{"version":3,"file":"static/js/736.34f5735d.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","components/PageHeading/PageHeading.styled.js","components/PageHeading/PageHeading.jsx","services/movies-api.js","views/MovieDetailsView/MovieDetailsView.jsx","views/MovieDetailsView/MovieDetailsView.styled.js"],"sourcesContent":["import styled from 'styled-components';\nexport const GoBackButton = styled.button`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  background-color: lightyellow;\n  border-radius: 10px;\n  border: none;\n  box-shadow: 0 0 10px 1px #30ebfc;\n  padding: 5px;\n`;\nexport const SpanLabel = styled.span`\n  margin-left: 10px;\n  color: #2314f7;\n  font-weight: 700;\n  padding: 5px;\n`;\n","import PropTypes from 'prop-types';\n// import { useNavigate } from 'react-router-dom';\nimport './Button.styled.js';\nimport { GoBackButton, SpanLabel } from './Button.styled';\n// import { ImArrowLeft } from 'react-icons/im';\n\nexport default function ButtonGoBack({ onClick, label, arrow }) {\n  // const navigate = useNavigate();\n  // console.log(navigate);\n  return (\n    <GoBackButton type=\"button\" onClick={onClick}>\n      {arrow}\n      {/* <ImArrowLeft fill=\"darkblue\" size=\"32\" /> */}\n      <SpanLabel> {label} </SpanLabel>\n    </GoBackButton>\n    //{' '}\n    // </GoBackButton>\n  );\n}\n\nButtonGoBack.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nexport const Title = styled.h1`\n  /* width: 300px; */\n  width: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px;\n  margin-top: 0;\n  margin-bottom: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 8px;\n  color: #2314f7;\n  font-weight: bold;\n  /* font-size: 40px; */\n  text-align: center;\n  background-image: repeating-linear-gradient(\n    -45deg,\n    #30ebfc,\n    #30ebfc 15px,\n    #fcfccf 15px,\n    #fcfccf 30px\n  );\n`;\n","import { Title } from './PageHeading.styled.js';\nimport PropTypes from 'prop-types';\n\nexport default function PageHeading({ text }) {\n  return <Title>{text}</Title>;\n}\nPageHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b799de2e1359641dffd47460cedfbdc0';\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n// гет-запит  по  пошуку фільму\nexport function getMovieBySearch(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?&query=${query}&api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n}\n// гет-запит для актерського складу\nexport function getCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n//  гет=запит для оглядів чи відкугів на фільм\nexport function getReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n//  гет-запит популярних фільмів\nexport function GetTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n// гет-запит про інфо фільму по айді\nexport function getMoviesById(movieId) {\n  // а тут наоборот єкспанд автор - когда мі забираем одну книжку, мі прикрепляем к ней ее автора, тоже по айдишнику\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n","import { useState, useEffect } from 'react';\nimport {\n  // NavLink,\n  Outlet,\n  useParams,\n  useNavigate,\n  useLocation,\n} from 'react-router-dom';\nimport PageHeading from '../../components/PageHeading/PageHeading';\nimport ButtonGoBack from '../../components/Button';\nimport * as movieAPI from '../../services/movies-api';\n// import styled from 'styled-components';\nimport {\n  CardMovie,\n  MovieInfo,\n  Horizontal,\n  LinkElem,\n  Titleh2,\n  Titleh3,\n} from '../MovieDetailsView/MovieDetailsView.styled';\nimport { ImArrowLeft } from 'react-icons/im';\n\nexport default function MovieDetailsView() {\n  // щоб отримати айдішнік одного фільму викоритовуємо хук - юз парамс\n  // const params = useParams();\n  // console.log(params);\n  // повертає нам обєкт динамічних параметрів\n  //беремо диструктуризуємо з парамс фільмайді\n  const { movieId } = useParams();\n  // ми ще раз робимо хттп запит, тому що якщо користувач просто заходить по ссилці на сторінку одного фільму, то у нас не рендерилися попередні список фільмфі, де був запит на бекенд, і ніякої відповіді від бекенду немає.\n  // ще раз - це якщо користувач відразу ввів адресу одного фільму\n  // обявляємо стейт для одного фільму і роблю юзефект фетч по муві айді і потім записую це в сетмуві\n  const [movie, setMovie] = useState(null);\n  // console.log(movie);\n  const navigate = useNavigate();\n  // console.log(navigate);\n  const location = useLocation();\n  const locationState = location.state;\n  const locationStateSearch = location.search;\n  console.log(locationStateSearch);\n  // const prevLocation = location.state.pathname;\n  console.log('MovieDetailsView: ', locationState);\n\n  useEffect(() => {\n    movieAPI.getMoviesById(movieId).then(response => setMovie(response));\n  }, [movieId]);\n  // функція що перевіряє чи є постер до фільму\n  const viewPoster = poster_path => {\n    if (poster_path === null) {\n      return 'https://wipfilms.net/wp-content/data/posters/tt0338683.jpg';\n      // 'NO POSTER';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n  // функція для переводу оцінки користувача в %\n  const userScore = vote_average => {\n    return vote_average * 10 + '%';\n  };\n  // тут перебираємо масив із жанрами через кому і пробел\n  const allGenres = genres => {\n    if (genres === null) {\n      return;\n    }\n    return genres.map(genre => genre.name).join(', ');\n  };\n\n  const onButtonGoBackClick = () => {\n    // перевіряємо , чи є стейт?\n    // якщо є, то переходимо за адресою з паснейм (звізки ми прийшли на цю сторінку)+ що було в рядку пошукуЖ\n    // (якщо там нічого не було, то просто повернемося на попередню сторінку, якщо в  стейті пошуку щось було - повернемося на сторінку пошуку\n    // якщо стейт нул - тобто ми просто відкрили карту фільма за посиланням, наприклад з гуглу, то\n    // переходимо на нашу початкову сторінку.\n    location.state\n      ? navigate(location.state.pathname + location.state.search)\n      : navigate('/');\n  };\n  return (\n    <>\n      {/* <ButtonGoBack /> */}\n      <Horizontal />\n      {/* тут використовуємо динамічний параметр взятий з юзпарамс */}\n      {/* якщо прийшда відповідь з бекенду(є фільми) ми можемо щось зарендерить, вибираємо з обєкта що нам потрібно (або це може бути окремий компонент типу карточка фільм кард) */}\n      {movie && (\n        <>\n          {/* <ButtonGoBack onClick={() => navigate(prevLocation)} /> */}\n          <ButtonGoBack\n            onClick={onButtonGoBackClick}\n            label={'GO BACK'}\n            arrow={<ImArrowLeft fill=\"#2314f7\" size=\"32\" />}\n          />\n          <PageHeading text={`${movie.title}`} />\n          <Horizontal />\n          <CardMovie>\n            <img\n              src={`${viewPoster(movie.poster_path)}`}\n              alt={movie.title}\n              width=\"240\"\n            />\n            <MovieInfo>\n              <Titleh2> {movie.title} </Titleh2>\n              <Titleh3> Overview: </Titleh3>\n              <p> {movie.overview} </p>\n              <p> User score: {`${userScore(movie.vote_average)}`} </p>\n              <Titleh3> Genres: </Titleh3>\n              <p>\n                {`${allGenres(movie.genres)}`}\n                {/* інший варіант через редьюс - перший аргумент функціі колбек, що приймає акк і текуще значення, \n                      і другий аргумент редьюса - пуста строчка, куди буде записуватись значення і між ними пробел */}\n                {/* {movie.genres.reduce(\n              (acc, currrent) => acc + ' ' + currrent.name,\n              ''\n            )} */}\n                {/* <Horizontal /> */}\n              </p>\n            </MovieInfo>\n          </CardMovie>\n          <Horizontal />\n          <Titleh2> Additional information </Titleh2>\n          <LinkElem to={`/movies/${movie.id}/cast`} state={location.state}>\n            {/* <PageHeading text=\"Cast\" /> */}\n            Cast\n          </LinkElem>\n          <LinkElem to={`/movies/${movie.id}/reviews`} state={location.state}>\n            {/* <PageHeading text=\"Reviews\" /> */}\n            Reviews\n          </LinkElem>\n\n          {/* тут будуть рендериться відповідні інфо без перезагрузки сторінки */}\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n}\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nexport const CardMovie = styled.div`\n  display: flex;\n  margin-bottom: 10px;\n  /* border-bottom: 1px solid #2a363b; */\n`;\nexport const MovieInfo = styled.div`\n  display: block;\n  margin-left: 20px;\n`;\nexport const Horizontal = styled.div`\n  height: 12px;\n  border: 0;\n  box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);\n`;\nexport const Titleh2 = styled.h2`\n  color: #2314f7;\n`;\nexport const Titleh3 = styled.h3`\n  color: #2314f7;\n`;\n\nexport const LinkElem = styled(NavLink)`\n  display: inline-block;\n  /* display: flex; */\n  text-decoration: none;\n  padding: 10px;\n  font-weight: 700;\n  color: #30ebfc;\n  font-size: 26px;\n  background: #fcfccf;\n  /* border: 5px solid #30ebfc; */\n  border-radius: 8px;\n  margin-right: 20px;\n  margin-bottom: 10px;\n  box-shadow: 0 0 10px 1px #30ebfc;\n\n  &.active {\n    /* composes: link; */\n    color: #2314f7;\n  }\n`;\n"],"names":["GoBackButton","styled","SpanLabel","ButtonGoBack","onClick","label","arrow","type","Title","PageHeading","text","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","getMovieBySearch","query","getCast","movieId","getReviews","GetTrending","getMoviesById","MovieDetailsView","useParams","useState","movie","setMovie","navigate","useNavigate","location","useLocation","locationState","state","locationStateSearch","search","console","log","useEffect","movieAPI","then","vote_average","poster_path","pathname","fill","size","title","src","alt","width","overview","genres","map","genre","name","join","allGenres","to","id","CardMovie","MovieInfo","Horizontal","Titleh2","Titleh3","LinkElem","NavLink"],"sourceRoot":""}